version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks and S3 bucket given a workflow ID.   
    parameters:
      event:
        type: string
     # workflow_id:
     #   type: string 
    steps:
      - run:
          name: Destroy environments
          when: << parameters.event >>
          command: |
            # Your code here                        
            # aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
            FRONTEND=$(curl -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request GET https://api.memstash.io/values/frontend_${CIRCLE_WORKFLOW_ID:0:7})
            if [[ $FRONTEND == 1 ]];
            then
              echo "delete s3 'udapeople-${CIRCLE_WORKFLOW_ID:0:7}' content"
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            fi
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    parameters:
      event:
        type: string
     # workflow_id:
     #   type: string 
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: << parameters.event >>
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable            
            echo "Revert migrations started..."
            SUCCESS=$(curl -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if [[ $SUCCESS == 1 ]];
            then
              echo "roll back migration started"
              cd ~/project/backend
              npm install
              npm run migrations:revert
              echo "roll back migration completed"
            fi
             echo "Revert migrations finish..."
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
      docker:
        # Docker image here
         - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        # Restore from cache
        # Your job code here
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Test front-end
            command: |
              cd frontend
              npm install
              npm run test
                
  test-backend:
    docker:
      # Docker image here
        - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
       - checkout
       - restore_cache:
            keys: [backend-build]
       - run:
            name: Test back-end
            command: |
              cd backend
              npm install
              npm run test
  
  scan-frontend:
    docker:
      # Docker image here
       - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Scan front-end
            command: |
              cd frontend
              npm install 
              npm audit fix --audit-level=critical --force             
              npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
       - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Scan back-end
            command: |
              cd backend
              npm install 
              npm install --save-dev ts-loader@9.2.6
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
        - image: amazon/aws-cli
    steps:
      # Checkout code from git
        - checkout
        - run: yum -y install tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |            
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
              
        - run:
            name: Ensure front-end infrastructure exist
            command: |              
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

        - run:
            name: Add back-end ip to ansible inventory
            command: |
              # Your code here
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
              echo `cat .circleci/ansible/inventory.txt`      
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure     
        - destroy-environment:
            event: on_fail
  
  configure-infrastructure:
    docker:
        # Docker image here that supports Ansible
        - image: python:3.7-alpine3.11
    steps:
        # Checkout code from git
        # Add ssh keys with fingerprint
        # attach workspace
        - checkout
        - add_ssh_keys:
            fingerprints: ["13:16:5b:27:2b:2a:74:d5:8a:da:82:61:b9:73:27:10"] 
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              # Your code here
              apk update
              apk upgrade
              apk add unzip 
              apk add curl
              /usr/local/bin/python -m pip install --upgrade pip                    
        - run:
            name: Install ansible
            command: |
              # your code here              
              apk add --update ansible 
              ansible --version
        - run:
            name: Install aws
            command: |
              # your code here                           
              pip install awscli --upgrade   
              aws --version       
        - run:
            name: Configure server
            command: |
              # Your code here 
              cd .circleci/ansible/ 
              ansible-playbook -i inventory.txt configure-server.yml
        
        - run:
            name: Install node_exporter
            command: |
              cd .circleci/ansible/
              ansible-playbook -i inventory.txt add-node-exporter.yml
              
        # Here's where you will add some code to rollback on failure   
        - destroy-environment:
              event: on_fail
  
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
            name: Install dependencies
            command: |
              # Your code here
              apk update
              apk upgrade
              apk add unzip 
              apk add curl
              /usr/local/bin/python -m pip install --upgrade pip    
      - run:
            name: Install node
            command: |
              apk add --update nodejs nodejs-npm
              node --version
              npm --version

      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and sve the migration output
            npm run migrations > migrations_dump.txt
            echo `cat migrations_dump.txt`
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here            
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "migration successfull"
              curl -H "Content-Type: text/plain" -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "migration was not created"
              curl -H "Content-Type: text/plain" -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
              event: on_fail
  
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
        - checkout
        - add_ssh_keys:
            fingerprints: ["13:16:5b:27:2b:2a:74:d5:8a:da:82:61:b9:73:27:10"] 
        - attach_workspace:
            at: ~/
        #- update-and-install-dependencies   
        - run:
            name: Install dependencies
            command: |
              # Your code here
              apk update
              apk upgrade
              apk add unzip 
              apk add curl
              /usr/local/bin/python -m pip install --upgrade pip    
        - run:
            name: Install node
            command: |
              apk add --update nodejs nodejs-npm
              node --version
              npm --version

        - run:
            name: Install ansible
            command: |
              # your code here              
              apk add --update ansible 
              ansible --version
        - run:
            name: Install aws
            command: |
              # your code here              
              # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              # unzip awscliv2.zip
              # ./aws/install -i /usr/local/aws -b /usr/local/bin/aws
              # aws --version        
              pip install awscli --upgrade   
              aws --version       
        - run:
            name: Deploy backend
            command: |
              # your code here
              echo "cd backend -------"
              cd backend
              echo "npm install -------"
              npm i
              npm run build
              cd ..
              # Zip the directory
              echo "zip the directory -------"
              tar -C backend -czvf artifact.tar.gz .
              echo "mv artifac to ansibble -------"
              mv artifact.tar.gz .circleci/ansible/
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
        - revert-migrations:
            event: on_fail
            
        - destroy-environment:
            event: on_fail
  
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
     - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: update
          command: |  
            sudo apt update && sudo apt upgrade            
            sudo apt install curl

      - run:
          name: Install aws
          command: |                        
            sudo apt-get install python python-pip
            sudo pip install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          event: on_fail
      - destroy-environment:
          event: on_fail
      - run:
          name: Build Success
          when: on_success
          command: |
            curl -H "Content-Type: text/plain" -H "token: f8c96b04-eedf-4709-a46e-a229beb2abb0" --request PUT --data "1" https://api.memstash.io/values/frontend_${CIRCLE_WORKFLOW_ID:0:7}

  smoke-tests:
    docker:
      # Lightweight Docker image 
       - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
        - checkout
        - add_ssh_keys:
            fingerprints: ["13:16:5b:27:2b:2a:74:d5:8a:da:82:61:b9:73:27:10"] 
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              # Your code here
              apk update
              apk upgrade
              apk add unzip 
              apk add curl
              /usr/local/bin/python -m pip install --upgrade pip    

        - run:
            name: Install node
            command: |
              apk add --update nodejs nodejs-npm
              node --version
              npm --version
        - run:
            name: Install aws
            command: |    
              pip install awscli --upgrade   
              aws --version       
            
        - run:
            name: Get backend url
            command: |
              # your code here
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
              echo $BACKEND_IP
        - run:
            name: Backend smoke test.
            command: |
              # your code here
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
              echo $BACKEND_IP
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
            
             
      # Here's where you will add some code to rollback on failure
        - run:
            name: Frontend smoke test.
            command: |
              # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
             
        - revert-migrations:
            event: on_fail
        - destroy-environment:
            event: on_fail

  cloudfront-update:
      docker:
        # Docker image here that supports AWS CLI
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        # - run: yum -y install tar gzip
        - run:
            name: Install dependencies
            command: |
              # your code here

        - run:
            name: Update cloudfront distribution
            command: |
              # your code here
              export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`OldWorkflowID\`].Value" --no-paginate --output text)
              OldWorkflowID=${OldWorkflowID#udapeople-}
              export CurrentWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              CurrentWorkflowID=${CurrentWorkflowID#udapeople-}

              echo CurrentWorkflowID: "${CurrentWorkflowID}"
              echo newWorkFlowId: "${CIRCLE_WORKFLOW_ID:0:7}"
              echo OldWorkflowID: "${OldWorkflowID}"  
                   
              if [[ $OldWorkflowID = EMPTY ]] 
              then             
                echo "Oldworkflow is InitialStack"
                OldWorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"                
              else
                OldWorkflowID=$CurrentWorkflowID
              fi
              
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" OldWorkflowID="${OldWorkflowID}" \
                --tags project=udapeople
        # Here's where you will add some code to rollback on failure
  
  cleanup:
    docker:
      # Docker image here
       - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout      
     
      - run:
          name: Remove old stacks and files
          command: | 
            # your code here        
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`OldWorkflowID\`].Value" --no-paginate --output text)
            OldWorkflowID=${OldWorkflowID#udapeople-}

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"

            # You can use any condition like:
            # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            # if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
            # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
                # your code goes here
                echo "Stack exist, remove....${OldWorkflowID}"
                echo "s3://udapeople-${OldWorkflowID}"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"                            
            fi


workflows:
  default:
      jobs:
        - build-frontend:
            filters:
                  branches: 
                    only: [ dev-branch, master]   
        - build-backend:
             filters:
              branches: 
                  only: [ dev-branch, master]
                  
        - test-frontend:
            filters:
              branches: 
                  only: [ dev-branch, master]
            requires: [build-frontend]
        - test-backend:
            filters:
              branches: 
                  only: [ dev-branch, master]
            requires: [build-backend]
        - scan-backend:
            filters:
              branches: 
                  only: [ dev-branch, master]
            requires: [build-backend]
        - scan-frontend:
            filters:
              branches: 
                  only: [ dev-branch, master]
            requires: [build-frontend]
        - deploy-infrastructure:
            filters:
                  branches:
                    only: master
            requires: [test-frontend, test-backend, scan-frontend, scan-backend]
        - configure-infrastructure:
            filters:
                  branches:
                    only: master
            requires: [deploy-infrastructure]
        - run-migrations:
            filters:
                  branches:
                    only: master
            requires: [configure-infrastructure]
        - deploy-frontend:
            filters:
                  branches:
                    only: master
            requires: [run-migrations]
        - deploy-backend:
            filters:
                  branches:
                    only: master
            requires: [run-migrations]
        - smoke-tests:
            filters:
                  branches:
                    only: master
            requires: [deploy-backend, deploy-frontend]
        - cloudfront-update:
            filters:
                  branches:
                    only: master
            requires: [smoke-tests]
        - cleanup:
            filters:
                  branches:
                    only: master
            requires: [cloudfront-update]
        
version: 2.1

orbs:
  slack: circleci/slack@4.12.5

commands:
  notify_status_on_fail:
    steps:
      - slack/notify:
          event: fail
          channel: udacity
          template: basic_fail_1
  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WorkflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo << parameters.WorkflowID >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WorkflowID >>
            aws s3 rm s3://udapeople-<< parameters.WorkflowID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.WorkflowID >>
  install_ansible:
    description: Install ansible
    steps:
      - run:
          name: Install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/output/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_status_on_fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_status_on_fail
      

  test-frontend:
      docker:

         - image: circleci/node:13.8.0
      steps:

        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Test front-end
            command: |
              cd frontend
              npm install
              npm run test
        - notify_status_on_fail
                
  test-backend:
    docker:

        - image: circleci/node:13.8.0
    steps:

       - checkout
       - restore_cache:
            keys: [backend-build]
       - run:
            name: Test back-end
            command: |
              cd backend
              npm install
              npm run test
       - notify_status_on_fail 
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:

      - checkout
      - run:
          name: Audit Frontend Dependencies
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      - notify_status_on_fail


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:

      - checkout
      - run:
          name: Audit Backend Dependencies
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - notify_status_on_fail

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
        - image: amazon/aws-cli
    steps:
      # Checkout code from git
        - checkout
        - run: yum -y install tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |            
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
              
        - run:
            name: Ensure front-end infrastructure exist
            command: |              
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

        - run:
            name: Add back-end ip to ansible inventory
            command: |
              # Your code here
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
              echo `cat .circleci/ansible/inventory.txt`      
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure     
        - destroy-environment
            # event: on_fail

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["bc:99:70:2d:db:4d:b9:18:a8:ae:7d:89:92:d7:b0:9f"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            echo -e "NODE_ENV=development\nENVIRONMENT: development\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}\nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            cat backend/.env
            cd .circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migrations_dump.txt
            
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully." migration_output.txt
            then
              curl https://kvdb.io/3TFJkVvMrT479qyp4zk1mM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              # touch ~/project/.circleci/outputs/db_migration_success
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/output/output.txt
      # - destroy-environment
               

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update curl tar
            npm install webpack-dev-server -g
            npm install
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install  
            npm run build
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive

      
      # - destroy-environment
      # - revert-migrations      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["bc:99:70:2d:db:4d:b9:18:a8:ae:7d:89:92:d7:b0:9f"]
      - attach_workspace:
          at: ~/
      - run: 
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update ansible zip
            apk add --update openssh-client tar gzip
            pip install awscli

      - run:
          name: Build backend app
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .

      - run:
          
          name: Deploy backend Setup EC2 instance 
          command: |
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cd .circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations 



  smoke-test:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (Curl)
                command: |
                    apt-get -y install curl
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            # - run:
            #     name: Backend smoke test.
            #     command: |
            #         BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            #         export API_URL="http://${BACKEND_IP}:3030"
            #         echo "${API_URL}"
            #         if curl "${API_URL}/api/status" | grep "ok"
            #         then
            #           return 0
            #         else
            #           return 1
            #         fi

            - run:
                name: Frontend smoke test.
                command: |
                    # your code here
                    sleep 60
                    URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
                    echo ${URL} 
                    if curl -s ${URL} | grep "Welcome"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            # - destroy-environment
            # - revert-migrations


cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Save old workflow
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text
              )
            echo "Old workflow id: ${OLD_WORKFLOW_ID}"
            curl https://kvdb.io/3TFJkVvMrT479qyp4zk1mM/old_workflow_id  -d "${OLD_WORKFLOW_ID}"
			
      - run:
          name: Update cloudfront distribution
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitStack
      - destroy-environment
      - revert-migrations 

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend,deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]